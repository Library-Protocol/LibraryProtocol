generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BorrowingStatus {
  Preparing
  Dispatched
  Delivered
  Returned
  Declined
}

enum BookRequestStatus {
  Pending
  Approved
  Rejected
}

enum UserRole {
  Admin
  Curator
  Member
}

enum SocialPlatform {
  Instagram
  Twitter
  LinkedIn
  Facebook
  TikTok
}

model Book {
  id              String       @id @default(uuid())
  onChainUniqueId String
  transactionHash String
  title           String
  author          String
  publisher       String
  publishDate     String
  pagination      Int
  additionalNotes String?
  isbn            String       @unique
  availability    Boolean      @default(true)
  image           String?
  curatorId       String
  curator         Curator      @relation(fields: [curatorId], references: [id])
  createdAt       DateTime     @default(now())
  borrowings      Borrowings[]
  nftTokenId      String
}

model Curator {
  id              String            @id @default(uuid())
  onChainUniqueId String
  transactionHash String
  wallet          String            @unique
  name            String
  country         String
  city            String
  state           String
  publicNotice    String?
  coverImage      String?
  isVerified      Boolean           @default(false)
  books           Book[]
  bookRequests    BookRequests[]
  bookRequestLogs BookRequestLogs[]
  createdAt       DateTime          @default(now())
  Borrowings      Borrowings[]
  BorrowingLogs   BorrowingLogs[]
  nftTokenId      String
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id])
}

model BookRequests {
  id                   String            @id @default(uuid())
  wallet               String
  isbn                 String
  title                String
  author               String
  additionalNotes      String?
  curatorId            String
  curator              Curator           @relation(fields: [curatorId], references: [id])
  createdAt            DateTime          @default(now())
  status               BookRequestStatus @default(Pending)
  transactionHash      String
  onChainBookRequestId String
  logs                 BookRequestLogs[]
}

model BookRequestLogs {
  id            String            @id @default(uuid())
  bookRequestId String
  bookRequest   BookRequests      @relation(fields: [bookRequestId], references: [id])
  curatorId     String
  curator       Curator           @relation(fields: [curatorId], references: [id])
  status        BookRequestStatus
  message       String?
  createdAt     DateTime          @default(now())
}

model Borrowings {
  id                 String          @id @default(uuid())
  onChainBorrowingId String
  wallet             String
  name               String
  email              String
  deliveryAddress    String
  phone              String?
  borrowDate         DateTime
  returnDate         DateTime
  bookId             String
  book               Book            @relation(fields: [bookId], references: [id])
  curatorId          String
  curator            Curator         @relation(fields: [curatorId], references: [id])
  createdAt          DateTime        @default(now())
  logs               BorrowingLogs[]
}

model BorrowingLogs {
  id          String          @id @default(uuid())
  wallet      String
  status      BorrowingStatus @default(Preparing)
  message     String?
  borrowingId String
  borrowing   Borrowings      @relation(fields: [borrowingId], references: [id])
  curatorId   String
  curator     Curator         @relation(fields: [curatorId], references: [id])
  createdAt   DateTime        @default(now())
}

model User {
  id                  String       @id @default(uuid())
  wallet              String       @unique
  name                String
  email               String?      @unique
  bio                 String? // Removed @db.Text
  profileImage        String?
  country             String?
  city                String?
  state               String?
  socialLinks         SocialLink[]
  onboardingCompleted Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  isVerified          Boolean      @default(false)
  role                UserRole     @default(Member)

  interests Interest[] // New relation to store user interests

  curator Curator?
}

model Interest {
  id     String @id @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, name]) // Ensure a user doesn't add the same interest multiple times
}

model SocialLink {
  id        String         @id @default(uuid())
  platform  SocialPlatform
  handle    String
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([userId, platform])
}
